.TH CRU_FILTER 7 @DATE_VERSION_TITLE@
.SH NAME
cru_filter \- specification for selectively removing edges and vertices
.SH SYNOPSIS
#include <cru/cru.h>
.sp
typedef struct
.BR cru_filter_s
.br
{
.br
.BR cru_qpred
.BR thinner;
.br
struct
.BR cru_zone_s
.BR fi_zone;
.br
struct
.BR cru_kernel_s
.BR fi_kernel;
.br
struct
.BR cru_order_s
.BR fi_order;
.br
} *
.BR cru_filter;
.SH DESCRIPTION
This structure parameterizes the
.BR cru_filtered
library function with necessary information initialized by the
application to remove edges or vertices from a graph selectively based
on user-defined criteria. Activities can be restricted to a section
of the graph by the
.BR cru_zone
structure in the
.BR fi_zone
field. Alternatively, the
.BR fi_zone
field may be omitted or zero-filled, in which case the whole graph is
affected.
.P
For each vertex in the graph, a test property is evaluated
according to the structure given by
.BR fi_kernel.v_op
field with the usual
.BR cru_prop
calling conventions if one is specified. The interpretation of the
test result differs depending on whether the
.BR thinner
field is specified. The
.BR thinner
field, if non-NULL, provides further edge filtering functionality
explained below following an explanation of the simpler case where the
.BR thinner
field is NULL. In this case, vertices are kept or removed on this
basis:
.TP
*
The results of a fold over each of the incoming and the
outgoing sets of edges, if defined respectively in the
.BR fi_kernel.v_op.incident
or
.BR fi_kernel.v_op.outgoing
structures, are passed respectively as the left
and right operands to the ternary operator referenced by the
.BR fi_kernel.v_op.vertex.map
field if one is specified, with the vertex being visited passed as the
middle operand.
.TP
*
If a ternary operator referenced by the
.BR fi_kernel.v_op.vertex.map
field returns NULL, then the vertex being visited is deleted from the
graph. If it returns any other value, the vertex is kept.
.TP
*
If the
.BR fi_kernel.v_op.vertex.map
field is omitted or NULL but at least one of the incident or outgoing
fold structures is specified, then the criterion for vertex
retention devolves to the disjunction of their results. That is, if
either yields a result other than NULL, then the vertex is
kept.
.TP
*
If neither the vertex map nor the folds are defined, then no
vertices are filtered directly, but may be removed if they become
unreachable due to edge filtering.
.TP
*
The
.BR fi_kernel.v_op.vertex.reduction
field and the
.BR fi_kernel.v_op.vertex.vacuous_case
field
are not used and may be omitted or initialized to
NULL.
.P
With regard to edge filtering, if the
.BR thinner
field is NULL and the
.BR fi_kernel.e_op.map
field is not, then edges are kept or removed on this basis:
.TP
*
When each vertex in the graph is visited, if a decision to keep it is
made as described above, then each of its outgoing edges connected to
a vertex that is also being kept is tested.
.TP
*
For each edge being tested, the ternary operator referenced through
the
.BR fi_kernel.e_op.map
field is passed the vertex being visited as the left operand, the edge
label as its middle operand, and the adjacent vertex via that edge as
the right operand.
.P
What happens next depends on whether an ordering is defined by the
.BR cru_order
structure in the
.BR fi_order
field or whether the field is zero-filled.
.TP
*
If no ordering is defined, then each
edge being tested is deleted whenever the
.BR fi_kernel.e_op.map
operator returns
NULL.
.TP
*
If an ordering is defined in the
.BR fi_order
field, then the edges local to the vertex being visited are partitioned
into classes based on equivalence of their labels under the ordering,
and each class is reduced with the
.BR fi_kernel.e_op.reduction
field following the usual
.BR cru_fold
calling conventions. If the result of the reduction is
NULL,
then all edges in the class are deleted. Otherwise, all are kept.
.P
If the
.BR fi_kernel.e_op.map
field is NULL, then no edges are filtered directly but may be
deleted as a consequence of being connected to a deleted vertex.
.P
The remainder of this section pertains to filtering when the
.BR thinner
field refers to a user-defined quarternary predicate.
.P
If the
.BR thinner
field is defined (i.e., non-NULL), then no vertices are deleted unless
they become unreachable. However, the vertices are still tested by the
.BR fi_kernel.v_op
probe in the same way as above if it is defined. The test result or
lack thereof indicates only whether any outgoing edges from the tested
vertex should be deleted.
.TP
*
If a
.BR fi_kernel.v_op
probe is specifed and its test result is non-NULL, then no outgoing
edges from the tested vertex are deleted.
.TP
*
If the vertex probe is not specified or its test result is NULL, and
if no fold is specified in the
.BR fi_kernel.e_op
field, all outgoing edges from the vertex being tested are admitted
for consideration as described below.
.TP
*
If the vertex probe is not specified or its test result is NULL, and
if a map is is specified in the
.BR fi_kernel.e_op.map
field but no reduction is specified in the
.BR fi_kernel.e_op.reduction
field, then all outgoing edges from the vertex being tested for
which the map returns NULL are deleted, and the surviving ones are
admitted for consideration as described below.
.TP
*
If the probe is not specified or its test result is NULL, and an
ordering is defined in the
.BR fi_order
field, and both the
.BR fi_kernel.e_op.map
field and the
.BR fi_kernel.e_op.reduction
field are specified, then the outgoing edges from the vertex being
tested are partitioned into equivalence classes based on the ordering
and each class as a whole is deleted or kept depending on the
result of the reduction over that class.
.P
The set of edges or the set of classes of edges obtained as above is
then filtered further according to the
.BR thinner
predicate as follows.
.TP
*
If the edges have been partitioned into classes, all members of
the minimum class with respect to the predicate are kept, and
all members of any other classes are deleted.
.TP
*
If the edges have not been partitioned into classes, only the single
minimum edge with respect to the predicate is kept, and all other
outgoing edges from the vertex being tested are deleted.
.P
To this end, the application should initialize the
.BR thinner
field to refer to a relational predicate on edges with the desired
effect. That is, it should be antisymmetric and it should return a
non-zero value whenever its left operand is preferable to be kept in
the graph. As a quarternary predicate, its four operands are an edge
label, the terminal vertex of the edge thus labeled, another edge
label, and the latter edge's terminus in that order. As always, the
predicate must not modify its operands but may assign the error code.
.SH ERRORS
If an ordering is defined by the
.BR fi_order
field but no edge filter is defined by
.BR fi_kernel.e_op
field, then an error of
.BR CRU_INCFIL
is reported by the
.BR cru_filtered
function, for an inconsistent
.BR cru_filter
structure.
.P
If an ordering is specified by the
.BR fi_kernel.e_order
field and a
.BR thinner
is also specified, then the
.BR thinner
should be defined consistently with the ordering insofar as equivalent
edges under the ordering are also equivalent with respect to the
.BR thinner.
This condition is necessary because comparison of classes is based on
comparison of arbitrarily selected members of the classes. This
condition is not enforceable by
.BR cru
but failure to meet it may lead to non-deterministic results.
.SH EXAMPLES
This function
.nf
   uintptr_t
   even (void *l, uintptr_t vertex, void *r, int *err)
   {
      return ! (vertex & 1);
   }
.fi
in this
.BR cru_filter
.nf
   struct cru_filter_s f = {
      .fi_kernel = {
         .v_op = {
            .vertex = {
               .map = (cru_top) even}}}};
.fi
calls for the retention of even numbered vertices in a graph of
numerical vertices and the removal of all others, whereas this
.BR cru_filter
.nf
   struct cru_filter_s f = {
      .fi_kernel = {
         .e_op = {
            .map = (cru_top) even}}};
.fi
specifies the remove of odd-numbered edges in a graph whose
edges are numerically labeled.
.SH NOTES
It is not impossible for vertices outside of a zone of the graph
restricted by the
.BR fi_zone
to be affected by filtering within the zone.
.TP
*
If the zone is defined as the reachable segment in the backward
direction from an initial vertex, and edges originating inside the
zone but terminating outside it are deleted, then their termini could
become unreachable and therefore deleted despite being outside the
zone.
.TP
*
If the zone is defined as the reachable segment in the forward
direction from an initial vertex, then edges originating outside the
zone but terminating inside it could be deleted due to their termini
being deleted, thereby reducing the number of outgoing edges seen by
vertex outside the zone.
.P
A
.BR cru_filter
structure specifying only a
.BR thinner
field is valid, and calls for all edges except the minimum outgoing
edge from each vertex to be deleted.
.SH FILES
.I @INCDIR@/data_types.h
.P
.I @INCDIR@/error_codes.h
.SH SEE ALSO
@SEE_ALSO@
.SH AUTHOR
Dennis Furey 
.MT @MAINTAINER_EMAIL@
.ME
.SH PROJECT PAGE
.UR @CMAKE_PROJECT_HOMEPAGE_URL@
.UE
