.TH CRU_SPREAD 3 @DATE_VERSION_TITLE@
.SH NAME
cru_spread \- resume building a partially built graph
.SH SYNOPSIS
#include <cru/cru.h>
.sp
.BR cru_graph
.BR cru_spread
(
.br
.BR cru_graph
.I g
,
.br
.BR cru_builder
.I b
,
.br
.BR cru_kill_switch
.I k
,
.br
unsigned
.I lanes
,
.br
int *
.I err
)
.SH DESCRIPTION
This function enables graphs to be built in multiple passes. When
.BR cru_spread
is passed an existing graph
.I g
previously built by
.BR cru_built,
these conditions apply.
.TP
*
Any vertex in
.I g
that has any outgoing edges before
.BR cru_spread
is called acquires no additional outgoing edges.
.TP
*
Any vertex in
.I g
lacking outgoing edges at the time
.BR cru_spread
is called, and any new vertex created afterwards, is passed to the
.BR connector
or
.BR subconnector
function in
.I b
following the usual
.BR cru_builder
calling conventions to create new outgoing edges from it and possibly
new adjacent vertices.
.P
The parameter
.I b
is required to point to a
.BR cru_builder
whose
.BR bu_sig
field is contains
.BR orders
and
.BR destructors
identical to those of the
.BR cru_sig
in the
.BR cru_builder
initially used to build
.I g
by
.BR cru_built,
but whose
.BR connector
or
.BR subconnector
functions may differ. The
.BR bu_sig.vertex_limit
field may also differ.
.\"killsw
In this case,
.I g
is reclaimed and a NULL value is returned.
.\"lanes
.P
For purposes of memory management,
.I g
is consumed by
.BR cru_spread
and should not be reclaimed by the caller.
.SH RETURN VALUE
On successful completion, the returned value is a pointer to a graph
derived from
.I g
by being spread according to the given specification, which
applications should treat as opaque but may pass as a parameter to
other library functions. In the event of any error, a NULL pointer is
returned. An unmodified copy of
.I g
is returned if the parameter
.I b
is
NULL.
.SH ERRORS
.\"cb_errs
.TP
.BR ENOMEM
There is insufficient memory to allocate all necessary resources.
.TP
.BR EAGAIN
Resources or permissions are insufficient to create a thread.
.TP
.BR CRU_BADKIL
The parameter
.I k
refers to an invalid or corrupted kill switch structure.
.TP
.BR CRU_INTKIL
The operation was stopped by user intervention using the kill switch
.I k.
.TP
.BR CRU_UNDCON
Both of the fields
.I b->connector
and
.I b->subconnector
are
NULL.
.TP
.BR CRU_INCCON
Both of the fields
.I b->connector
and
.I b->subconnector
are initialized as something other than
NULL. 
.TP
.BR CRU_INTOVF
The number of vertices approached or exceeded the limit set by
.I b->bu_sig.vertex_limit.
.TP
.BR CRU_UNDEQU
A vertex destructor is defined by
.I b->bu_sig.destructors.v_free
but no vertex equality relation is defined in
.I b->bu_sig.orders.v_order.equal,
or an edge destructor is defined by
.I b->bu_sig.destructors.e_free
but no edge equality relation is defined in
.I b->bu_sig.orders.e_order.equal.
.TP
.BR CRU_UNDHSH
A vertex destructor is defined by
.I b->bu_sig.destructors.v_free
but no vertex hash function is defined in
.I b->bu_sig.orders.v_order.hash
or an edge destructor is defined by
.I b->bu_sig.destructors.e_free
but no vertex hash function is defined in
.I b->bu_sig.orders.e_order.hash.
.TP
.BR CRU_INCSPB
The given orders
.I b->bu_sig.orders
or the destructors
.I b->bu_sig.destructors
differ from those used in the
.BR cru_builder
previously passed to
.BR cru_built
to build the graph
.I g.
.SH NOTES
This function may be useful for saving memory in applications that
build a graph and then prune it. When building the whole graph before
pruning it is prohibitive, building the graph in phases and pruning it
during each phase may be feasible.
.SH FILES
.I @INCDIR@/cru.h
.P
.I @INCDIR@/data_types.h
.P
.I @INCDIR@/error_codes.h
.P
.I @INCDIR@/function_types.h
.SH SEE ALSO
@SEE_ALSO@
.SH AUTHOR
Dennis Furey 
.MT @MAINTAINER_EMAIL@
.ME
.SH PROJECT PAGE
.UR @CMAKE_PROJECT_HOMEPAGE_URL@
.UE
