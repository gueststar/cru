.TH CRU_BUILT 3 @DATE_VERSION_TITLE@
.SH NAME
cru_built \- graph building function in the cru library
.SH SYNOPSIS
#include <cru/cru.h>
.sp
.BR cru_graph
.BR cru_built
(
.br
.BR cru_builder
.I b
,
.br
.BR cru_vertex
.I v
,
.br
.BR cru_kill_switch
.I k
,
.br
unsigned
.I lanes
,
.br
int *
.I err
)
.SH DESCRIPTION
This function allocates and builds the graph containing
all vertices reachable from a given initial vertex
.I v
according to the specification
.I b,
which is a pointer to a
.BR cru_builder
structure initialized by the caller.
.P
Because the
.BR cru_vertex
type is a
.I void
pointer alias,
.I v
can be of any compatible type.
If
.I v
is a pointer to dynamically allocated storage, then
.I b->bu_sig.destructors.v_free
must be initialized by the caller as a pointer to a compatible
.BR cru_destructor
function.
.\"killsw
In this case, no graph is built.
.\"lanes
.P
For purposes of memory management,
.I v
is consumed by
.BR cru_built
and should not be reclaimed by the caller.
The other parameters are not consumed.
.SH RETURN VALUE
On successful completion, the returned value is a pointer to a graph
built according to the given specification, which applications should
treat as opaque but may pass as a parameter to other library
functions. In the event of any error, a
NULL
pointer is returned. A
NULL
pointer is also returned if the parameter
.I b
is
NULL,
which in this case represents an empty graph and is not in itself an
error.
.SH ERRORS
.\"cb_errs
.TP
.BR ENOMEM
There is insufficient memory to allocate all necessary resources.
.TP
.BR EAGAIN
Resources or permissions are insufficient to create a thread.
.TP
.BR CRU_BADKIL
The parameter
.I k
refers to an invalid or corrupted kill switch structure.
.TP
.BR CRU_INTKIL
The operation was stopped by user intervention using the kill switch
.I k.
.TP
.BR CRU_UNDCON
Both of the fields
.I b->connector
and
.I b->subconnector
are
NULL.
.TP
.BR CRU_INCCON
Both of the fields
.I b->connector
and
.I b->subconnector
are initialized as something other than
NULL. 
.TP
.BR CRU_INCVEL
The vertex equality relation
.I b->bu_sig.orders.v_order.equal
is not reflexive.
.TP
.BR CRU_INTOVF
The number of vertices approached or exceeded the limit set by
.I b->bu_sig.vertex_limit.
.TP
.BR CRU_UNDEQU
A vertex destructor is defined by
.I b->bu_sig.destructors.v_free
but no vertex equality relation is defined in
.I b->bu_sig.orders.v_order.equal.
.TP
.BR CRU_UNDHSH
A vertex destructor is defined by
.I b->bu_sig.destructors.v_free
but no vertex hash function is defined in
.I b->bu_sig.orders.v_order.hash.
.SH NOTES
If an edge destructor is defined by
.I b->bu_sig.destructors.e_free,
then it is good practice to initialize the equality and hash functions in
.I b->bu_sig.orders.e_order
although they not required for building, because subsequent operations
may require them to have been defined in advance.
.SH FILES
.I @INCDIR@/cru.h
.P
.I @INCDIR@/data_types.h
.P
.I @INCDIR@/error_codes.h
.P
.I @INCDIR@/function_types.h
.SH SEE ALSO
@SEE_ALSO@
.SH AUTHOR
Dennis Furey 
.MT @MAINTAINER_EMAIL@
.ME
.SH PROJECT PAGE
.UR @CMAKE_PROJECT_HOMEPAGE_URL@
.UE
