.TH CRU_GET 3 @DATE_VERSION_TITLE@
.SH NAME
cru_get \- retrieve an attribute associated with the current graph
.SH SYNOPSIS
#include <cru/cru.h>
.sp
void *
.BR cru_get
(void)
.SH DESCRIPTION
When called from within any user-written callback function invoked by
a
.BR cru
library function operating on a graph, this function retrieves an
attribute previously associated with the graph by
.BR cru_set.
The relevant graph is determined automatically provided that
.BR cru_get
runs in the same thread as the callback function.
.SH RETURN VALUE
If
.BR cru_get
is called outside the thread context of a callback function, or if it
is called with respect to a graph for which no attribute has been set,
it returns a NULL value. Otherwise, it returns the attribute.
.SH ERRORS
none
.SH EXAMPLE
Setting and getting attributes enable applications to pass additional
parameters to callback functions without resorting to global
variables, whether as a matter of style or of necessity. For example,
a function
.nf
   double
   scale (void *l, double value, void *r, int *err)
   {
      return value * (double) cru_get ();
   }   
.fi
can be used in a
.BR cru_mutator
.nf
   struct cru_mutator_s m = {
      .mu_kernel = {
         .v_op = {
            .vertex = {
               .map = (cru_top) scale}}}};
.fi
in an application that invokes
.nf
   cru_set (g, (void *) (double) 1.1, &err);
   g = cru_mutated (g, &m, UNKILLABLE, CONCURRENTLY, &err);
.fi
to scale every vertex in a graph 
.I g
of floating point numbers by a factor of 1.1. As opposed to using a
global variable for the factor, this coding style would enable the
same map to operate concurrently on multiple graphs with a distinct
factor for each graph. This example presupposes floating point numbers
of the same size as void pointers.
.SH NOTES
Library functions compatible with
.BR cru_get
include
.BR cru_built,
.BR cru_composed,
.BR cru_crossed,
.BR cru_fabricated,
.BR cru_filtered,
.BR cru_induced,
.BR cru_mapreduced,
.BR cru_merged,
.BR cru_mutated,
.BR cru_partition_of,
.BR cru_postponed,
.BR cru_split,
and
.BR cru_stretched.
.P
Changing the attribute while an operation is in progress may cause
non-deterministic results due to data races. If the attribute is a
pointer, changing the memory it addresses while an operation is in
progress may also cause non-deterministic results.  If the attribute
is a pointer to data on the stack that goes out of scope or to the
heap that is freed while an operation is in progress, undefined
behavior follows. None of these conditions is detected but all are
easily avoidable by sound memory management and by having callback
functions treat the attributes as read-only.
.SH FILES
.I @INCDIR@/cru.h
.SH SEE ALSO
@SEE_ALSO@
.SH AUTHOR
Dennis Furey 
.MT @MAINTAINER_EMAIL@
.ME
.SH PROJECT PAGE
.UR @CMAKE_PROJECT_HOMEPAGE_URL@
.UE
